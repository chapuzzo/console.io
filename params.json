{"name":"Console.io","tagline":"JavaScript Remote Web Console","body":"# Console.IO\r\n\r\n[![Build Status](https://travis-ci.org/nkashyap/console.io.png?branch=master)](https://travis-ci.org/nkashyap/console.io)\r\n[![Nodejitsu Deploy Status Badges](https://webhooks.nodejitsu.com/nkashyap/console.io.png)](https://webops.nodejitsu.com#nkashyap/console.io)\r\n\r\nConsole.IO is a NodeJS project. It provides Remote Web Console for websites and web applications.\r\nIt uses express.io (express & socket.io) to provide user real time experience.\r\n\r\nIt works pretty much on all modern browsers, mobile devices, Smart TVs, etc\r\n\r\nTested on: \r\n* Toshiba TV (2011, 2012, 2013)\r\n* LG NetCast TV (2011, 2012, 2013)\r\n* Philips NetTV (2011, 2012, 2013)\r\n* Samsung TV (2010, 2011, 2012, 2013)\r\n* Panasonic TV (2012, 2013)\r\n* Technika Avtrex STB\r\n* Sony (BDP-S4100)\r\n* Hopper Dish (Hopper)\r\n* Firefox, Safari, Opera, Chrome, Maple, PhantomJS and IE\r\n* iPhone, iPod, iPad, Android browser, windows 8 phone etc\r\n\r\n\r\n### INSTALLATION\r\n#### NPM\r\n\r\n```bash\r\nnpm install -g xconsole.io\r\n```\r\n\r\n#### Source (install.bat for windows users)\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n### START SERVER\r\n#### NPM\r\n\r\n```bash\r\nconsoleio\r\n```\r\n\r\n#### Source (start.bat for window users)\r\n\r\n```bash\r\nnode ./server/main.js\r\n```\r\n\r\n### USAGE\r\n#### Include Script directly\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"http://<console.io server>/console.io.js\"></script>\r\n```\r\n\r\n#### Via RequireJS\r\n\r\n```html\r\n    //requirejs bootstrap file\r\n\r\n    requirejs.config({\r\n        baseUrl: './',\r\n        paths: {\r\n            \"socket.io\": \"<console.io server>/socket.io/socket.io\",\r\n            \"console.io\": \"<console.io server>/console.io\"\r\n        }\r\n    });\r\n\r\n    // usage\r\n    define(['console.io'], function (consoleio) {\r\n        consoleio.configure({});\r\n    });\r\n```\r\n\r\n### CONFIGURATION\r\n#### Config Object (Works only when script is included directly)\r\n\r\nCreate a config object on ConsoleIO but note that it only works when script is included directly not via RequireJS.\r\n\r\n```html\r\nwindow.ConsoleIO = window.ConsoleIO || {};\r\n\r\nwindow.ConsoleIO.config = {\r\n    url: \"<console.io server>\",\r\n    base: \"\",\r\n\r\n    // optionals\r\n    secure: false,\r\n\r\n    nativeConsole: true,\r\n    web: false,  // true to display web console\r\n    webOnly: false, // true for web console mode only\r\n\r\n    // Web console config\r\n\tfilters: ['log','error'],\r\n\tsearch: 'test',\r\n\tpageSize: 100,\r\n\r\n    // Web UI config\r\n    docked: false,\r\n    position: 'bottom',\r\n    height: '300px',\r\n    width: '99%'\r\n};\r\n```\r\n\r\n#### QueryString Parameters (Works only when script is included directly)\r\n\r\nPass list of configurations options in the query strings parameters like given below.\r\nAny query string parameters in the location bar will overwrite file query strings parameters.\r\nNote that it only works when script is included directly not via RequireJS.\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"http://<console.io server>/console.io.js?url=<console.io server>\"></script>\r\n```\r\n\r\n#### Configurations when loaded via RequireJS\r\n```html\r\ndefine(['console.io'], function (consoleio) {\r\n    consoleio.configure({\r\n        url: \"<console.io server>\",\r\n        base: \"\",\r\n\r\n        // optionals\r\n        secure: false,\r\n\r\n        nativeConsole: true,\r\n        web: false,\r\n        webOnly: false,\r\n\r\n        // Web console config\r\n        filters: ['log','error'],\r\n        search: 'test',\r\n        pageSize: 100,\r\n\r\n        // Web UI config\r\n        docked: false,\r\n        position: 'bottom',\r\n        height: '300px',\r\n        width: '99%'\r\n    });\r\n});\r\n```\r\n\r\nNOTE: It can also capture iframe logs. To do that just include console.io.js script file in the child document.\r\n\r\nVisit http://<console.io server>/ for ConsoleIO interface (Tested on Chrome Browsers)\r\n\r\n![Console.IO](https://raw.github.com/nkashyap/console.io/master/resources/images/console.io.png)\r\n\r\n![Status tab](https://raw.github.com/nkashyap/console.io/master/resources/images/status-tab.png)\r\n\r\n![Source tab](https://raw.github.com/nkashyap/console.io/master/resources/images/source-tab.png)\r\n\r\n![Preview tab](https://raw.github.com/nkashyap/console.io/master/resources/images/preview-tab.png)\r\n\r\n![Console tab](https://raw.github.com/nkashyap/console.io/master/resources/images/console-tab.png)\r\n\r\n\r\nNOTE:\r\n* ![Online icons](https://raw.github.com/nkashyap/console.io/master/resources/icons/online.png) Device is registered and connected.\r\n* ![Offline icons](https://raw.github.com/nkashyap/console.io/master/resources/icons/offline.png) Device is registered but offline.\r\n* ![Subscribe icons](https://raw.github.com/nkashyap/console.io/master/resources/icons/subscribe.png) Device is subscribed (double click on Online icon to subscribe).\r\n* ![Web icons](https://raw.github.com/nkashyap/console.io/master/resources/icons/console.png) web console icon to enable/disable web remotely.\r\n\r\n\r\n### APPLICATION\r\n#### Editor\r\n\r\nCommands/Scripts can be execute on connected client from application.\r\n\r\nShortcuts: \r\n* Ctrl+Enter: execute command\r\n* Ctrl+Space: autocomplate\r\n* Ctrl-Q: toggle comments\r\n* Shift-Ctrl-Q: fold/unfold code\r\n* Ctrl-F / Cmd-F: Start searching\r\n* Ctrl-G / Cmd-G: Find next\r\n* Shift-Ctrl-G / Shift-Cmd-G: Find previous\r\n* Shift-Ctrl-F / Cmd-Option-F: Replace\r\n* Shift-Ctrl-R / Shift-Cmd-Option-F: Replace all\r\n\r\nNOTE: All multilines code should be wrapped within self executable function. E.G\r\n```html\r\n(function doSomeThing(){\r\n .......\r\n}())\r\n```\r\n\r\n#### Device and Tabs\r\n* Files: Show all attached javascript and css files in the web page\r\n* Status: Device Status and some basic information\r\n* Source: Double click on a file in file explorer to view file content\r\n* Preview: HTML dom structure\r\n* Console: Remote console \r\n\t* Pause incoming logs\r\n\t* Clear logs\r\n\t* Export logs\r\n\t* Change page size\r\n\t* Search word or use regex to filter logs\r\n\t* Filter logs by type\r\n\r\n#### Web console\r\n* Control it remotely\r\n\t* Pause incoming logs\r\n\t* Clear logs\r\n\t* Change page size\r\n\t* Search word or use regex to filter logs\r\n\t* Filter logs by type\r\n* TODO\r\n    * Ability to configure height, width, position & remote control.\r\n    * Control logging speed\r\n    * Scroll through logs (Smart Tv/mobile/tablets)\r\n\r\n### CONSOLE API\r\n * console.assert(x)\r\n * console.count(key)\r\n * console.time(name, reset)\r\n * console.timeEnd(name)\r\n * console.debug(arguments...)\r\n * console.warn(arguments...)\r\n * console.info(arguments...)\r\n * console.log(arguments...)\r\n * console.dir(object)\r\n * console.dirxml(HTML Element)\r\n * console.error(error)\r\n * console.exception(error)\r\n * console.trace()\r\n * console.profile()    // works only when client is enabled with profiler mode\r\n * console.profileEnd() // works only when client is enabled with profiler mode\r\n\r\n#### TODO\r\n* console.group()\r\n* console.groupCollapsed()\r\n* console.groupEnd()\r\n* console.markTimeline()\r\n* console.timestamp()\r\n\r\n### SERVER CONFIGURATION\r\n\r\nAll server side configurations are defined in server/config.js file.\r\nIf you have install using npm -g then you will find it in C:\\Users\\[USERNAME]\\AppData\\Roaming\\npm\\node_modules\\xconsole.io\\server folder\r\n\r\n#### Server Port\r\nYou can change default (8082) port number\r\n\r\n```html\r\nexpress: {\r\n    production: {\r\n        ...\r\n        { 'port-number': 8082 },\r\n        { 'session-key': 'console.io' },\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n#### SSL Support\r\n\r\nChange following in server side config file to enable server to run over SSL and use \"https\" instead of \"http\" to inject files on client.\r\nTo generate your own SSL Certificate please check this [How to generate custom SSL certificates](http://forum.synology.com/wiki/index.php/How_to_generate_custom_SSL_certificates).\r\n\r\n```html\r\nvar config = {\r\n    .....\r\n    https: {\r\n        enable: true, // change true/false to enable and disable SSL\r\n        key: './server/certificates/server.key',\r\n        certificate: './server/certificates/server.crt',\r\n        ca: './server/certificates/ca.crt'\r\n    },\r\n    .....\r\n}\r\n```\r\n\r\nAnd change console.io config as follows\r\n\r\n```html\r\n{\r\n    ....\r\n    secure: true,\r\n    .....\r\n}\r\n```\r\n\r\n### IISNODE\r\n\r\nConsole.IO can be hosted inside IIS. It allows to bypass SSL self-signed certificate issue.\r\n\r\n#### INSTALL\r\n * Install x64 node from http://nodejs.org/download/\r\n * Install x64 iisnode from https://github.com/tjanczuk/iisnode\r\n * IIS URL Rewrite module\r\n * Add Web Application inside a website and set it to console.io source directory\r\n * Navigate to https://[your machine name]/console.io/ to access console.io application.\r\n\r\nNOTE: Only IIS8 supports websockets therefore Console.IO is configured to used xhr-polling by default\r\n\r\n![IIS NODE](https://raw.github.com/nkashyap/console.io/master/resources/images/iis.png).\r\n\r\n#### USAGE\r\n##### Include Script directly\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"/console.io/console.io.js\"></script>\r\n```\r\n\r\n##### Via RequireJS\r\n\r\n```html\r\n    //requirejs bootstrap file\r\n\r\n    requirejs.config({\r\n        baseUrl: './',\r\n        paths: {\r\n            \"socket.io\": \"/console.io/socket.io/socket.io\",\r\n            \"console.io\": \"/console.io/console.io\"\r\n        }\r\n    });\r\n\r\n    // usage\r\n    define(['console.io'], function (consoleio) {\r\n        consoleio.configure({});\r\n    });\r\n```\r\n\r\n### PROFILER\r\n\r\nProfile support is now added in Console.IO. Profile tab is only displayed when profiler is enabled and it can only enabled from client side.\r\n\r\nNOTE:it only works when files are loaded using RequireJS at the moment.\r\n\r\n#### Enabling profiler from client\r\n\r\n##### Include Script directly\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"/console.io/console.io.js?profile=true&excludes=folder1,folder2\"></script>\r\n```\r\n\r\n##### Via RequireJS\r\n\r\n```html\r\n    // usage\r\n    define(['console.io'], function (consoleio) {\r\n        consoleio.configure({\r\n            profile: true,\r\n            excludes: ['folder1','folder2']\r\n        });\r\n    });\r\n```\r\n\r\n#### Fix regex issue in node dependency\r\n\r\nAdd following lines at 1408 in /node_modules/escodegen/escodegen.js\r\n\r\n```html\r\nif (expr.value.toString() === '[object Object]' && expr.raw) {\r\n    expr.value = expr.raw;\r\n}\r\n```\r\n\r\n\r\n### ANGULARJS\r\n\r\nExample to setup AngularJS global $http error handler\r\n\r\n```html\r\nangular.module('app', ['ngResource',])\r\n\t.config(function ($httpProvider)\r\n\t{\r\n\t\t$httpProvider.responseInterceptors.push(function globalErrorHandling($q) {\r\n\t\t\treturn function(promise) {\r\n\t\t\t\treturn promise.then(function(successResponse) {\r\n\t\t\t\t\tconsole.info(successResponse);\r\n\t\t\t\t\treturn successResponse;\r\n\r\n\t\t\t\t}, function(errorResponse) {\r\n\t\t\t\t\tconsole.exception(errorResponse);\r\n\t\t\t\t\treturn $q.reject(errorResponse);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t});\r\n\t});\r\n});\r\n```\r\n\r\n### TODO\r\n * Add JSDoc & Unit Tests\r\n * Support scaling\r\n\r\n### COPYRIGHT AND LICENSE\r\n MIT LICENSE \r\n\r\n### REFERENCE\r\n * [Javascript Stacktrace] (https://github.com/eriwen/javascript-stacktrace)\r\n * [codemirror] (http://codemirror.net/)\r\n * [express.io] (https://github.com/techpines/express.io)\r\n * [Socket.io] (http://socket.io/#how-to-use)\r\n * [prettify] (https://code.google.com/p/google-code-prettify/)\r\n * [dhtmlx] (http://dhtmlx.com/) [GPL LICENSE]\r\n * [OpenSSL] (http://www.openssl.org/)\r\n * [Html2Canvas] (http://html2canvas.hertzen.com/)\r\n * [Grunt] (http://gruntjs.com/)\r\n * [uglify-js] (https://github.com/mishoo/UglifyJS/)\r\n * [js-beautify] (https://github.com/einars/js-beautify/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}